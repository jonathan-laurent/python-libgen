# Autogenerated by python_libgen

from dataclasses import dataclass

from typing import Generic, TypeAlias, TypeVar, Union

A = TypeVar("A")

@dataclass
class Constant:
    arg: int

@dataclass
class Var:
    arg: str

@dataclass
class Add:
    arg1: "Expr"
    arg2: "Expr"

Expr: TypeAlias = Union[Constant, Var, Add]

@dataclass
class Answer(Generic[A]):
    arg: A

@dataclass
class Error(Generic[A]):
    arg: str

Result: TypeAlias = Union[Answer[A], Error[A]]

@dataclass
class CustommerData:
    age: int
    gender: str

def eval(valuation: list[tuple[str, int]], expr: Expr) -> int | None:
    """
    Evaluate an expression given a valuation that maps variables
    to values. Return None if a variable does not appear in the valuation.
    """
    ...

def fact(n: int) -> int: ...
def custommer_data(name: str) -> Result[CustommerData]: ...
def log(x: float, *, base: float | None = None) -> float: ...
