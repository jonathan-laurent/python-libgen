# Autogenerated by python_libgen

from ctypes import RTLD_LOCAL, PyDLL, c_char_p

from importlib.resources import files, as_file

DLL_NAME = "ocaml_module.so"

dll_resource = files("mylib.bin").joinpath(DLL_NAME)
with as_file(dll_resource) as dll_file:
    dll = PyDLL(str(dll_file), RTLD_LOCAL)

argv_t = c_char_p * 3
argv = argv_t(DLL_NAME.encode("utf-8"), b"register", None)
dll.caml_startup(argv)

import _ocaml_module_internals  # type: ignore


from typing import Literal, TypeAlias, TypeVar, TypedDict, Union

A = TypeVar("A")

Expr: TypeAlias = Union[
    tuple[Literal["Constant"], tuple[int]],
    tuple[Literal["Var"], tuple[str]],
    tuple[Literal["Add"], tuple["Expr", "Expr"]],
]

Result: TypeAlias = Union[
    tuple[Literal["Answer"], tuple[A]], tuple[Literal["Error"], tuple[str]]
]


class CustommerData(TypedDict, total=True):
    age: int
    gender: str


def eval(valuation: list[tuple[str, int]], expr: Expr) -> int | None:
    """
    Evaluate an expression given a valuation that maps variables
    to values. Return None if a variable does not appear in the valuation.
    """
    return _ocaml_module_internals.eval(valuation, expr)


def fact(n: int) -> int:
    return _ocaml_module_internals.fact(n)


def custommer_data(name: str) -> Result[CustommerData]:
    return _ocaml_module_internals.custommer_data(name)


def log(x: float, *, base: float | None = None) -> float:
    return _ocaml_module_internals.log(x, base)
