# Autogenerated by python-libgen

from ctypes import RTLD_LOCAL, PyDLL, c_char_p

from importlib.resources import files, as_file

DLL_NAME = "ocaml_module.so"

dll_resource = files("mylib.bin").joinpath(DLL_NAME)
with as_file(dll_resource) as dll_file:
    dll = PyDLL(str(dll_file), RTLD_LOCAL)

argv_t = c_char_p * 3
argv = argv_t(DLL_NAME.encode("utf-8"), b"register", None)
dll.caml_startup(argv)

import _ocaml_module_internals  # type: ignore


from dataclasses import dataclass

from typing import Generic, TypeAlias, TypeVar, Union

A = TypeVar("A")


@dataclass
class Constant:
    arg: int


@dataclass
class Var:
    arg: str


@dataclass
class Add:
    arg1: "Expr"
    arg2: "Expr"


Expr: TypeAlias = Union[Constant, Var, Add]


def _ocaml_of_Expr(x):
    return (
        ("Constant", (x.arg,))
        if isinstance(x, Constant)
        else ("Var", (x.arg,))
        if isinstance(x, Var)
        else ("Add", (_ocaml_of_Expr(x.arg1), _ocaml_of_Expr(x.arg2)))
        if isinstance(x, Add)
        else NotImplemented
    )


def _Expr_of_ocaml(x):
    return (
        Constant(arg=x[1][0])
        if x[0] == "Constant"
        else Var(arg=x[1][0])
        if x[0] == "Var"
        else Add(arg1=_Expr_of_ocaml(x[1][0]), arg2=_Expr_of_ocaml(x[1][1]))
        if x[0] == "Add"
        else NotImplemented
    )


@dataclass
class Answer(Generic[A]):
    arg: A


@dataclass
class Error(Generic[A]):
    arg: str


Result: TypeAlias = Union[Answer[A], Error[A]]


def _ocaml_of_Result(x, _ocaml_of_A):
    return (
        ("Answer", (_ocaml_of_A(x.arg),))
        if isinstance(x, Answer)
        else ("Error", (x.arg,))
        if isinstance(x, Error)
        else NotImplemented
    )


def _Result_of_ocaml(x, _A_of_ocaml):
    return (
        Answer(arg=_A_of_ocaml(x[1][0]))
        if x[0] == "Answer"
        else Error(arg=x[1][0])
        if x[0] == "Error"
        else NotImplemented
    )


@dataclass
class CustommerData:
    age: int
    gender: str


def _ocaml_of_CustommerData(x):
    return x.__dict__


def _CustommerData_of_ocaml(x):
    return CustommerData(**x)


def eval(valuation: list[tuple[str, int]], expr: Expr) -> int | None:
    """
    Evaluate an expression given a valuation that maps variables
    to values. Return None if a variable does not appear in the valuation.
    """
    return _ocaml_module_internals.eval(valuation, _ocaml_of_Expr(expr))


def fact(n: int) -> int:
    return _ocaml_module_internals.fact(n)


def custommer_data(name: str) -> Result[CustommerData]:
    _ret = _ocaml_module_internals.custommer_data(name)
    return _Result_of_ocaml(_ret, _CustommerData_of_ocaml)


def log(x: float, *, base: float | None = None) -> float:
    return _ocaml_module_internals.log(x, base)
